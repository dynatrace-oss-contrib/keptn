// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fake

import (
	"github.com/keptn/keptn/webhook-service/lib"
	"sync"
)

// Ensure, that ICurlExecutorMock does implement lib.ICurlExecutor.
// If this is not the case, regenerate this file with moq.
var _ lib.ICurlExecutor = &ICurlExecutorMock{}

// ICurlExecutorMock is a mock implementation of lib.ICurlExecutor.
//
// 	func TestSomethingThatUsesICurlExecutor(t *testing.T) {
//
// 		// make and configure a mocked lib.ICurlExecutor
// 		mockedICurlExecutor := &ICurlExecutorMock{
// 			CurlFunc: func(curlCmd string) (string, error) {
// 				panic("mock out the Curl method")
// 			},
// 		}
//
// 		// use mockedICurlExecutor in code that requires lib.ICurlExecutor
// 		// and then make assertions.
//
// 	}
type ICurlExecutorMock struct {
	// CurlFunc mocks the Curl method.
	CurlFunc func(curlCmd string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Curl holds details about calls to the Curl method.
		Curl []struct {
			// CurlCmd is the curlCmd argument value.
			CurlCmd string
		}
	}
	lockCurl sync.RWMutex
}

// Curl calls CurlFunc.
func (mock *ICurlExecutorMock) Curl(curlCmd string) (string, error) {
	if mock.CurlFunc == nil {
		panic("ICurlExecutorMock.CurlFunc: method is nil but ICurlExecutor.Curl was just called")
	}
	callInfo := struct {
		CurlCmd string
	}{
		CurlCmd: curlCmd,
	}
	mock.lockCurl.Lock()
	mock.calls.Curl = append(mock.calls.Curl, callInfo)
	mock.lockCurl.Unlock()
	return mock.CurlFunc(curlCmd)
}

// CurlCalls gets all the calls that were made to Curl.
// Check the length with:
//     len(mockedICurlExecutor.CurlCalls())
func (mock *ICurlExecutorMock) CurlCalls() []struct {
	CurlCmd string
} {
	var calls []struct {
		CurlCmd string
	}
	mock.lockCurl.RLock()
	calls = mock.calls.Curl
	mock.lockCurl.RUnlock()
	return calls
}
