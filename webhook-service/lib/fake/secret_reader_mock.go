// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fake

import (
	"github.com/keptn/keptn/webhook-service/lib"
	"sync"
)

// Ensure, that ISecretReaderMock does implement lib.ISecretReader.
// If this is not the case, regenerate this file with moq.
var _ lib.ISecretReader = &ISecretReaderMock{}

// ISecretReaderMock is a mock implementation of lib.ISecretReader.
//
// 	func TestSomethingThatUsesISecretReader(t *testing.T) {
//
// 		// make and configure a mocked lib.ISecretReader
// 		mockedISecretReader := &ISecretReaderMock{
// 			ReadSecretFunc: func(name string, key string) (string, error) {
// 				panic("mock out the ReadSecret method")
// 			},
// 		}
//
// 		// use mockedISecretReader in code that requires lib.ISecretReader
// 		// and then make assertions.
//
// 	}
type ISecretReaderMock struct {
	// ReadSecretFunc mocks the ReadSecret method.
	ReadSecretFunc func(name string, key string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// ReadSecret holds details about calls to the ReadSecret method.
		ReadSecret []struct {
			// Name is the name argument value.
			Name string
			// Key is the key argument value.
			Key string
		}
	}
	lockReadSecret sync.RWMutex
}

// ReadSecret calls ReadSecretFunc.
func (mock *ISecretReaderMock) ReadSecret(name string, key string) (string, error) {
	if mock.ReadSecretFunc == nil {
		panic("ISecretReaderMock.ReadSecretFunc: method is nil but ISecretReader.ReadSecret was just called")
	}
	callInfo := struct {
		Name string
		Key  string
	}{
		Name: name,
		Key:  key,
	}
	mock.lockReadSecret.Lock()
	mock.calls.ReadSecret = append(mock.calls.ReadSecret, callInfo)
	mock.lockReadSecret.Unlock()
	return mock.ReadSecretFunc(name, key)
}

// ReadSecretCalls gets all the calls that were made to ReadSecret.
// Check the length with:
//     len(mockedISecretReader.ReadSecretCalls())
func (mock *ISecretReaderMock) ReadSecretCalls() []struct {
	Name string
	Key  string
} {
	var calls []struct {
		Name string
		Key  string
	}
	mock.lockReadSecret.RLock()
	calls = mock.calls.ReadSecret
	mock.lockReadSecret.RUnlock()
	return calls
}
