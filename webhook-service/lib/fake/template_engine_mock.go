// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fake

import (
	"github.com/keptn/keptn/webhook-service/lib"
	"sync"
)

// Ensure, that ITemplateEngineMock does implement lib.ITemplateEngine.
// If this is not the case, regenerate this file with moq.
var _ lib.ITemplateEngine = &ITemplateEngineMock{}

// ITemplateEngineMock is a mock implementation of lib.ITemplateEngine.
//
// 	func TestSomethingThatUsesITemplateEngine(t *testing.T) {
//
// 		// make and configure a mocked lib.ITemplateEngine
// 		mockedITemplateEngine := &ITemplateEngineMock{
// 			ParseTemplateFunc: func(date interface{}, templateStr string) (string, error) {
// 				panic("mock out the ParseTemplate method")
// 			},
// 		}
//
// 		// use mockedITemplateEngine in code that requires lib.ITemplateEngine
// 		// and then make assertions.
//
// 	}
type ITemplateEngineMock struct {
	// ParseTemplateFunc mocks the ParseTemplate method.
	ParseTemplateFunc func(date interface{}, templateStr string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// ParseTemplate holds details about calls to the ParseTemplate method.
		ParseTemplate []struct {
			// Date is the date argument value.
			Date interface{}
			// TemplateStr is the templateStr argument value.
			TemplateStr string
		}
	}
	lockParseTemplate sync.RWMutex
}

// ParseTemplate calls ParseTemplateFunc.
func (mock *ITemplateEngineMock) ParseTemplate(date interface{}, templateStr string) (string, error) {
	if mock.ParseTemplateFunc == nil {
		panic("ITemplateEngineMock.ParseTemplateFunc: method is nil but ITemplateEngine.ParseTemplate was just called")
	}
	callInfo := struct {
		Date        interface{}
		TemplateStr string
	}{
		Date:        date,
		TemplateStr: templateStr,
	}
	mock.lockParseTemplate.Lock()
	mock.calls.ParseTemplate = append(mock.calls.ParseTemplate, callInfo)
	mock.lockParseTemplate.Unlock()
	return mock.ParseTemplateFunc(date, templateStr)
}

// ParseTemplateCalls gets all the calls that were made to ParseTemplate.
// Check the length with:
//     len(mockedITemplateEngine.ParseTemplateCalls())
func (mock *ITemplateEngineMock) ParseTemplateCalls() []struct {
	Date        interface{}
	TemplateStr string
} {
	var calls []struct {
		Date        interface{}
		TemplateStr string
	}
	mock.lockParseTemplate.RLock()
	calls = mock.calls.ParseTemplate
	mock.lockParseTemplate.RUnlock()
	return calls
}
