// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fake

import (
	"github.com/keptn/keptn/shipyard-controller/models"
	"sync"
)

// IUniformIntegrationManagerMock is a mock implementation of handler.IUniformIntegrationManager.
//
// 	func TestSomethingThatUsesIUniformIntegrationManager(t *testing.T) {
//
// 		// make and configure a mocked handler.IUniformIntegrationManager
// 		mockedIUniformIntegrationManager := &IUniformIntegrationManagerMock{
// 			CreateOrUpdateSubscriptionFunc: func(integrationID string, subscription models.Subscription) error {
// 				panic("mock out the CreateOrUpdateSubscription method")
// 			},
// 			DeleteSubscriptionFunc: func(integrationID string, subscriptionID string) error {
// 				panic("mock out the DeleteSubscription method")
// 			},
// 			GetRegistrationsFunc: func(params models.GetUniformIntegrationsParams) ([]models.Integration, error) {
// 				panic("mock out the GetRegistrations method")
// 			},
// 			GetSubscriptionFunc: func(integrationID string, subscriptionID string) (*models.Subscription, error) {
// 				panic("mock out the GetSubscription method")
// 			},
// 			GetSubscriptionsFunc: func(integrationID string) ([]models.Subscription, error) {
// 				panic("mock out the GetSubscriptions method")
// 			},
// 			RegisterFunc: func(integration models.Integration) error {
// 				panic("mock out the Register method")
// 			},
// 			UnregisterFunc: func(id string) error {
// 				panic("mock out the Unregister method")
// 			},
// 			UpdateLastSeenFunc: func(integrationID string) (*models.Integration, error) {
// 				panic("mock out the UpdateLastSeen method")
// 			},
// 		}
//
// 		// use mockedIUniformIntegrationManager in code that requires handler.IUniformIntegrationManager
// 		// and then make assertions.
//
// 	}
type IUniformIntegrationManagerMock struct {
	// CreateOrUpdateSubscriptionFunc mocks the CreateOrUpdateSubscription method.
	CreateOrUpdateSubscriptionFunc func(integrationID string, subscription models.Subscription) error

	// DeleteSubscriptionFunc mocks the DeleteSubscription method.
	DeleteSubscriptionFunc func(integrationID string, subscriptionID string) error

	// GetRegistrationsFunc mocks the GetRegistrations method.
	GetRegistrationsFunc func(params models.GetUniformIntegrationsParams) ([]models.Integration, error)

	// GetSubscriptionFunc mocks the GetSubscription method.
	GetSubscriptionFunc func(integrationID string, subscriptionID string) (*models.Subscription, error)

	// GetSubscriptionsFunc mocks the GetSubscriptions method.
	GetSubscriptionsFunc func(integrationID string) ([]models.Subscription, error)

	// RegisterFunc mocks the Register method.
	RegisterFunc func(integration models.Integration) error

	// UnregisterFunc mocks the Unregister method.
	UnregisterFunc func(id string) error

	// UpdateLastSeenFunc mocks the UpdateLastSeen method.
	UpdateLastSeenFunc func(integrationID string) (*models.Integration, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateOrUpdateSubscription holds details about calls to the CreateOrUpdateSubscription method.
		CreateOrUpdateSubscription []struct {
			// IntegrationID is the integrationID argument value.
			IntegrationID string
			// Subscription is the subscription argument value.
			Subscription models.Subscription
		}
		// DeleteSubscription holds details about calls to the DeleteSubscription method.
		DeleteSubscription []struct {
			// IntegrationID is the integrationID argument value.
			IntegrationID string
			// SubscriptionID is the subscriptionID argument value.
			SubscriptionID string
		}
		// GetRegistrations holds details about calls to the GetRegistrations method.
		GetRegistrations []struct {
			// Params is the params argument value.
			Params models.GetUniformIntegrationsParams
		}
		// GetSubscription holds details about calls to the GetSubscription method.
		GetSubscription []struct {
			// IntegrationID is the integrationID argument value.
			IntegrationID string
			// SubscriptionID is the subscriptionID argument value.
			SubscriptionID string
		}
		// GetSubscriptions holds details about calls to the GetSubscriptions method.
		GetSubscriptions []struct {
			// IntegrationID is the integrationID argument value.
			IntegrationID string
		}
		// Register holds details about calls to the Register method.
		Register []struct {
			// Integration is the integration argument value.
			Integration models.Integration
		}
		// Unregister holds details about calls to the Unregister method.
		Unregister []struct {
			// ID is the id argument value.
			ID string
		}
		// UpdateLastSeen holds details about calls to the UpdateLastSeen method.
		UpdateLastSeen []struct {
			// IntegrationID is the integrationID argument value.
			IntegrationID string
		}
	}
	lockCreateOrUpdateSubscription sync.RWMutex
	lockDeleteSubscription         sync.RWMutex
	lockGetRegistrations           sync.RWMutex
	lockGetSubscription            sync.RWMutex
	lockGetSubscriptions           sync.RWMutex
	lockRegister                   sync.RWMutex
	lockUnregister                 sync.RWMutex
	lockUpdateLastSeen             sync.RWMutex
}

// CreateOrUpdateSubscription calls CreateOrUpdateSubscriptionFunc.
func (mock *IUniformIntegrationManagerMock) CreateOrUpdateSubscription(integrationID string, subscription models.Subscription) error {
	if mock.CreateOrUpdateSubscriptionFunc == nil {
		panic("IUniformIntegrationManagerMock.CreateOrUpdateSubscriptionFunc: method is nil but IUniformIntegrationManager.CreateOrUpdateSubscription was just called")
	}
	callInfo := struct {
		IntegrationID string
		Subscription  models.Subscription
	}{
		IntegrationID: integrationID,
		Subscription:  subscription,
	}
	mock.lockCreateOrUpdateSubscription.Lock()
	mock.calls.CreateOrUpdateSubscription = append(mock.calls.CreateOrUpdateSubscription, callInfo)
	mock.lockCreateOrUpdateSubscription.Unlock()
	return mock.CreateOrUpdateSubscriptionFunc(integrationID, subscription)
}

// CreateOrUpdateSubscriptionCalls gets all the calls that were made to CreateOrUpdateSubscription.
// Check the length with:
//     len(mockedIUniformIntegrationManager.CreateOrUpdateSubscriptionCalls())
func (mock *IUniformIntegrationManagerMock) CreateOrUpdateSubscriptionCalls() []struct {
	IntegrationID string
	Subscription  models.Subscription
} {
	var calls []struct {
		IntegrationID string
		Subscription  models.Subscription
	}
	mock.lockCreateOrUpdateSubscription.RLock()
	calls = mock.calls.CreateOrUpdateSubscription
	mock.lockCreateOrUpdateSubscription.RUnlock()
	return calls
}

// DeleteSubscription calls DeleteSubscriptionFunc.
func (mock *IUniformIntegrationManagerMock) DeleteSubscription(integrationID string, subscriptionID string) error {
	if mock.DeleteSubscriptionFunc == nil {
		panic("IUniformIntegrationManagerMock.DeleteSubscriptionFunc: method is nil but IUniformIntegrationManager.DeleteSubscription was just called")
	}
	callInfo := struct {
		IntegrationID  string
		SubscriptionID string
	}{
		IntegrationID:  integrationID,
		SubscriptionID: subscriptionID,
	}
	mock.lockDeleteSubscription.Lock()
	mock.calls.DeleteSubscription = append(mock.calls.DeleteSubscription, callInfo)
	mock.lockDeleteSubscription.Unlock()
	return mock.DeleteSubscriptionFunc(integrationID, subscriptionID)
}

// DeleteSubscriptionCalls gets all the calls that were made to DeleteSubscription.
// Check the length with:
//     len(mockedIUniformIntegrationManager.DeleteSubscriptionCalls())
func (mock *IUniformIntegrationManagerMock) DeleteSubscriptionCalls() []struct {
	IntegrationID  string
	SubscriptionID string
} {
	var calls []struct {
		IntegrationID  string
		SubscriptionID string
	}
	mock.lockDeleteSubscription.RLock()
	calls = mock.calls.DeleteSubscription
	mock.lockDeleteSubscription.RUnlock()
	return calls
}

// GetRegistrations calls GetRegistrationsFunc.
func (mock *IUniformIntegrationManagerMock) GetRegistrations(params models.GetUniformIntegrationsParams) ([]models.Integration, error) {
	if mock.GetRegistrationsFunc == nil {
		panic("IUniformIntegrationManagerMock.GetRegistrationsFunc: method is nil but IUniformIntegrationManager.GetRegistrations was just called")
	}
	callInfo := struct {
		Params models.GetUniformIntegrationsParams
	}{
		Params: params,
	}
	mock.lockGetRegistrations.Lock()
	mock.calls.GetRegistrations = append(mock.calls.GetRegistrations, callInfo)
	mock.lockGetRegistrations.Unlock()
	return mock.GetRegistrationsFunc(params)
}

// GetRegistrationsCalls gets all the calls that were made to GetRegistrations.
// Check the length with:
//     len(mockedIUniformIntegrationManager.GetRegistrationsCalls())
func (mock *IUniformIntegrationManagerMock) GetRegistrationsCalls() []struct {
	Params models.GetUniformIntegrationsParams
} {
	var calls []struct {
		Params models.GetUniformIntegrationsParams
	}
	mock.lockGetRegistrations.RLock()
	calls = mock.calls.GetRegistrations
	mock.lockGetRegistrations.RUnlock()
	return calls
}

// GetSubscription calls GetSubscriptionFunc.
func (mock *IUniformIntegrationManagerMock) GetSubscription(integrationID string, subscriptionID string) (*models.Subscription, error) {
	if mock.GetSubscriptionFunc == nil {
		panic("IUniformIntegrationManagerMock.GetSubscriptionFunc: method is nil but IUniformIntegrationManager.GetSubscription was just called")
	}
	callInfo := struct {
		IntegrationID  string
		SubscriptionID string
	}{
		IntegrationID:  integrationID,
		SubscriptionID: subscriptionID,
	}
	mock.lockGetSubscription.Lock()
	mock.calls.GetSubscription = append(mock.calls.GetSubscription, callInfo)
	mock.lockGetSubscription.Unlock()
	return mock.GetSubscriptionFunc(integrationID, subscriptionID)
}

// GetSubscriptionCalls gets all the calls that were made to GetSubscription.
// Check the length with:
//     len(mockedIUniformIntegrationManager.GetSubscriptionCalls())
func (mock *IUniformIntegrationManagerMock) GetSubscriptionCalls() []struct {
	IntegrationID  string
	SubscriptionID string
} {
	var calls []struct {
		IntegrationID  string
		SubscriptionID string
	}
	mock.lockGetSubscription.RLock()
	calls = mock.calls.GetSubscription
	mock.lockGetSubscription.RUnlock()
	return calls
}

// GetSubscriptions calls GetSubscriptionsFunc.
func (mock *IUniformIntegrationManagerMock) GetSubscriptions(integrationID string) ([]models.Subscription, error) {
	if mock.GetSubscriptionsFunc == nil {
		panic("IUniformIntegrationManagerMock.GetSubscriptionsFunc: method is nil but IUniformIntegrationManager.GetSubscriptions was just called")
	}
	callInfo := struct {
		IntegrationID string
	}{
		IntegrationID: integrationID,
	}
	mock.lockGetSubscriptions.Lock()
	mock.calls.GetSubscriptions = append(mock.calls.GetSubscriptions, callInfo)
	mock.lockGetSubscriptions.Unlock()
	return mock.GetSubscriptionsFunc(integrationID)
}

// GetSubscriptionsCalls gets all the calls that were made to GetSubscriptions.
// Check the length with:
//     len(mockedIUniformIntegrationManager.GetSubscriptionsCalls())
func (mock *IUniformIntegrationManagerMock) GetSubscriptionsCalls() []struct {
	IntegrationID string
} {
	var calls []struct {
		IntegrationID string
	}
	mock.lockGetSubscriptions.RLock()
	calls = mock.calls.GetSubscriptions
	mock.lockGetSubscriptions.RUnlock()
	return calls
}

// Register calls RegisterFunc.
func (mock *IUniformIntegrationManagerMock) Register(integration models.Integration) error {
	if mock.RegisterFunc == nil {
		panic("IUniformIntegrationManagerMock.RegisterFunc: method is nil but IUniformIntegrationManager.Register was just called")
	}
	callInfo := struct {
		Integration models.Integration
	}{
		Integration: integration,
	}
	mock.lockRegister.Lock()
	mock.calls.Register = append(mock.calls.Register, callInfo)
	mock.lockRegister.Unlock()
	return mock.RegisterFunc(integration)
}

// RegisterCalls gets all the calls that were made to Register.
// Check the length with:
//     len(mockedIUniformIntegrationManager.RegisterCalls())
func (mock *IUniformIntegrationManagerMock) RegisterCalls() []struct {
	Integration models.Integration
} {
	var calls []struct {
		Integration models.Integration
	}
	mock.lockRegister.RLock()
	calls = mock.calls.Register
	mock.lockRegister.RUnlock()
	return calls
}

// Unregister calls UnregisterFunc.
func (mock *IUniformIntegrationManagerMock) Unregister(id string) error {
	if mock.UnregisterFunc == nil {
		panic("IUniformIntegrationManagerMock.UnregisterFunc: method is nil but IUniformIntegrationManager.Unregister was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	mock.lockUnregister.Lock()
	mock.calls.Unregister = append(mock.calls.Unregister, callInfo)
	mock.lockUnregister.Unlock()
	return mock.UnregisterFunc(id)
}

// UnregisterCalls gets all the calls that were made to Unregister.
// Check the length with:
//     len(mockedIUniformIntegrationManager.UnregisterCalls())
func (mock *IUniformIntegrationManagerMock) UnregisterCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	mock.lockUnregister.RLock()
	calls = mock.calls.Unregister
	mock.lockUnregister.RUnlock()
	return calls
}

// UpdateLastSeen calls UpdateLastSeenFunc.
func (mock *IUniformIntegrationManagerMock) UpdateLastSeen(integrationID string) (*models.Integration, error) {
	if mock.UpdateLastSeenFunc == nil {
		panic("IUniformIntegrationManagerMock.UpdateLastSeenFunc: method is nil but IUniformIntegrationManager.UpdateLastSeen was just called")
	}
	callInfo := struct {
		IntegrationID string
	}{
		IntegrationID: integrationID,
	}
	mock.lockUpdateLastSeen.Lock()
	mock.calls.UpdateLastSeen = append(mock.calls.UpdateLastSeen, callInfo)
	mock.lockUpdateLastSeen.Unlock()
	return mock.UpdateLastSeenFunc(integrationID)
}

// UpdateLastSeenCalls gets all the calls that were made to UpdateLastSeen.
// Check the length with:
//     len(mockedIUniformIntegrationManager.UpdateLastSeenCalls())
func (mock *IUniformIntegrationManagerMock) UpdateLastSeenCalls() []struct {
	IntegrationID string
} {
	var calls []struct {
		IntegrationID string
	}
	mock.lockUpdateLastSeen.RLock()
	calls = mock.calls.UpdateLastSeen
	mock.lockUpdateLastSeen.RUnlock()
	return calls
}
